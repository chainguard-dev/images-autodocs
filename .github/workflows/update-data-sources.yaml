name: Build Chainguard Images Reference Docs

on:
  schedule:
    - cron: "0 0 * * *"

  workflow_dispatch:

env:
  AUTODOCS_CACHE: "${{ github.workspace }}/cache"
  AUTODOCS_IGNORE_IMAGES: "alpine-base:k3s-images:k3s-embedded:source-controller:sdk:spire:musl-dynamic:nri-kube-events:nri-kubernetes:nri-prometheus:gcc-musl:external-attacher:external-resizer:oidc-discovery-provider:kubernetes-dashboard-metrics-scraper:kustomize-controller:kyvernopre:alpine-base:curl-dev"
jobs:
  main:
    permissions:
      id-token: write # Enable OIDC
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      ############################################################################################
      # Set up Build Environment
      ############################################################################################
      - name: Set up workdir
        run: |
          mkdir -m 777 -p "${{ env.AUTODOCS_CACHE }}"

      - name: Set up gitsign
        uses: chainguard-dev/actions/setup-gitsign@main

      - name: Set up Chainctl
        uses: chainguard-dev/actions/setup-chainctl@main
        with:
          identity: "${{ secrets.CHAINCTL_IDENTITY }}"

      - name: Set up Crane
        uses: imjasonh/setup-crane@v0.1

      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3.1.1

      ############################################################################################
      # Fetch Image Metadata
      ############################################################################################
      - name: Fetch images list
        run: |
          chainctl img ls --group "${{ secrets.CHAINCTL_GROUP_PUBLIC }}" -ojson > "${{ env.AUTODOCS_CACHE }}/images-tags.json"

      - name: Fetch images metadata
        run: |
          echo "Fetching variants config...";
          for image in $(jq -r '.[].repo.name' ${{ env.AUTODOCS_CACHE }}/images-tags.json); do
            echo "\n###########################################################################\n"
            echo "Fetching latest tags info for ${image} image"
            echo "\n###########################################################################\n"
            for tags in $(jq --arg image_repo $image -r 'map(select(.repo.name == $image_repo)) | [.[].tags[].name] | map(select(startswith("latest"))) | .[]' ${{ env.AUTODOCS_CACHE }}/images-tags.json); do
              for tag in $tags; do
                cosign verify-attestation $(crane digest --full-ref --platform=linux/amd64 cgr.dev/chainguard/${image}:${tag}) \
                  --certificate-identity="https://github.com/chainguard-images/images/.github/workflows/release.yaml@refs/heads/main" \
                  --certificate-oidc-issuer="https://token.actions.githubusercontent.com" --type="https://apko.dev/image-configuration" \
                  2>/dev/null | jq -rs '.[0].payload' | base64 -d > ${{ env.AUTODOCS_CACHE }}/${image}.${tag}.json
              done
            done
          done


      ############################################################################################
      # Notify Slack
      ############################################################################################
      - name: "Send notification to Slack"
        if: ${{ steps.cpr.outputs.pull-request-number }}
        uses: chainguard-dev/images-autodocs@1.3.3
        with:
          command: notify pullrequest
        env:
          AUTODOCS_SLACK_PRIMARY: ${{ secrets.AUTODOCS_SLACK_PRIMARY }}
          AUTODOCS_SLACK_SECONDARY: ${{ secrets.AUTODOCS_SLACK_SECONDARY }}
          AUTODOCS_SLACK_GENERAL: ${{ secrets.AUTODOCS_SLACK_GENERAL }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          PR_ACTION: ${{ steps.cpr.outputs.pull-request-operation }}
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          PR_SHA: ${{ steps.cpr.outputs.pull-request-head-sha }}
